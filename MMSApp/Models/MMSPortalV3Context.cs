// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MMSApp.Models;

public partial class MMSPortalV3Context : DbContext
{
    IConfiguration _config;
    public MMSPortalV3Context(IConfiguration config)
    {
        _config = config;
    }

    public MMSPortalV3Context(DbContextOptions<MMSPortalV3Context> options, IConfiguration config)
        : base(options)
    {
        _config = config;
    }

    public virtual DbSet<Alphabet> Alphabets { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<CommissionType> CommissionTypes { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Degree> Degrees { get; set; }

    public virtual DbSet<GuildCategory> GuildCategories { get; set; }

    public virtual DbSet<GuildSubCategory> GuildSubCategories { get; set; }

    public virtual DbSet<Iban> Ibans { get; set; }

    public virtual DbSet<MarketerContract> MarketerContracts { get; set; }

    public virtual DbSet<Merchant> Merchants { get; set; }

    public virtual DbSet<MerchantState> MerchantStates { get; set; }

    public virtual DbSet<MerchantSyncTable> MerchantSyncTables { get; set; }

    public virtual DbSet<PSP> PSPs { get; set; }

    public virtual DbSet<Person> Persons { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<Province> Provinces { get; set; }

    public virtual DbSet<Request> Requests { get; set; }

    public virtual DbSet<RequestDetail> RequestDetails { get; set; }

    public virtual DbSet<RequestIban> RequestIbans { get; set; }

    public virtual DbSet<RequestState> RequestStates { get; set; }

    public virtual DbSet<RequestType> RequestTypes { get; set; }

    public virtual DbSet<SettelementType> SettelementTypes { get; set; }

    public virtual DbSet<Shop> Shops { get; set; }

    public virtual DbSet<ShopPerson> ShopPersons { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer(_config.GetConnectionString("MMS_DB"), x => x.UseDateOnlyTimeOnly()
            );
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<CommissionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ShareTypes");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.Property(e => e.ContractDate)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.Contracts).HasConstraintName("FK_Contract_Customer");

            entity.HasOne(d => d.Project).WithMany(p => p.Contracts).HasConstraintName("FK_Contract_Project");

            entity.HasOne(d => d.ShareType).WithMany(p => p.Contracts).HasConstraintName("FK_Contracts_ShareTypes");
        });

        modelBuilder.Entity<Degree>(entity =>
        {
            entity.Property(e => e.Name).HasDefaultValueSql("(N'-')");
        });

        modelBuilder.Entity<GuildSubCategory>(entity =>
        {
            entity.HasOne(d => d.GuildCategory).WithMany(p => p.GuildSubCategories).HasConstraintName("FK_GuildSubCategory_GuildCategory");
        });

        modelBuilder.Entity<Iban>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CustomersIbans");

            entity.HasOne(d => d.Customer).WithMany(p => p.Ibans).HasConstraintName("FK_CustomersIbans_Customer");

            entity.HasOne(d => d.Person).WithMany(p => p.Ibans).HasConstraintName("FK_Ibans_Persons");

            entity.HasOne(d => d.ShareType).WithMany(p => p.Ibans).HasConstraintName("FK_CustomersIbans_ShareTypes");
        });

        modelBuilder.Entity<MarketerContract>(entity =>
        {
            entity.Property(e => e.ContractDate)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Iban).IsFixedLength();

            entity.HasOne(d => d.Customer).WithMany(p => p.MarketerContracts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MarketerContract_Customer");

            entity.HasOne(d => d.MarketerPerson).WithMany(p => p.MarketerContracts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MarketerContract_Person");

            entity.HasOne(d => d.ShareType).WithMany(p => p.MarketerContracts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MarketerContracts_ShareTypes");
        });

        modelBuilder.Entity<Merchant>(entity =>
        {
            entity.HasOne(d => d.Customer).WithMany(p => p.Merchants).HasConstraintName("FK_Merchants_Customer");

            entity.HasOne(d => d.MerchantState).WithMany(p => p.Merchants).HasConstraintName("FK_Merchants_MerchantStates");

            entity.HasOne(d => d.Psp).WithMany(p => p.Merchants).HasConstraintName("FK_Merchants_CustomersPSP");

            entity.HasOne(d => d.TerminalType).WithMany(p => p.Merchants).HasConstraintName("FK_Merchants_TerminalTypes");
        });

        modelBuilder.Entity<PSP>(entity =>
        {
            entity.Property(e => e.Enabled).HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.Property(e => e.PersonTypeId).HasDefaultValueSql("(CONVERT([bigint],(0)))");

            entity.HasOne(d => d.BirthCertificateAlphabiticNo).WithMany(p => p.People).HasConstraintName("FK_Person_Alphabitic");

            entity.HasOne(d => d.Country).WithMany(p => p.PersonCountries).HasConstraintName("FK_Persons_Countries1");

            entity.HasOne(d => d.Degree).WithMany(p => p.People).HasConstraintName("FK_Person_Degree");

            entity.HasOne(d => d.NationalityCountry).WithMany(p => p.PersonNationalityCountries).HasConstraintName("FK_Persons_Countries");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasOne(d => d.ShareType).WithMany(p => p.Projects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Projects_ShareTypes");
        });

        modelBuilder.Entity<Province>(entity =>
        {
            entity.Property(e => e.Abbreviation).IsFixedLength();
        });

        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasOne(d => d.Customer).WithMany(p => p.Requests).HasConstraintName("FK_Request_Customer");

            entity.HasOne(d => d.Merchant).WithMany(p => p.Requests).HasConstraintName("FK_Requests_Merchants");

            entity.HasOne(d => d.Psp).WithMany(p => p.Requests).HasConstraintName("FK_Request_CustomersPSP");

            entity.HasOne(d => d.RequestState).WithMany(p => p.Requests).HasConstraintName("FK_Request_RequestState");

            entity.HasOne(d => d.RequestType).WithMany(p => p.Requests).HasConstraintName("FK_Request_RequestType");
        });

        modelBuilder.Entity<RequestDetail>(entity =>
        {
            entity.HasOne(d => d.Request).WithMany(p => p.RequestDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RequestDetails_Requests");
        });

        modelBuilder.Entity<RequestIban>(entity =>
        {
            entity.HasOne(d => d.Request).WithMany(p => p.RequestIbans).HasConstraintName("FK_RequestIbans_Request");

            entity.HasOne(d => d.ShareType).WithMany(p => p.RequestIbans).HasConstraintName("FK_RequestIbans_ShareTypes");
        });

        modelBuilder.Entity<SettelementType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TerminalTypes");
        });

        modelBuilder.Entity<Shop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Customers");

            entity.Property(e => e.taxPayerCode).IsFixedLength();

            entity.HasOne(d => d.City).WithMany(p => p.Shops).HasConstraintName("FK_Customers_Cities");

            entity.HasOne(d => d.GuildCategory).WithMany(p => p.Shops)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_GuildCategory");
        });

        modelBuilder.Entity<ShopPerson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ShopsPersons");

            entity.HasOne(d => d.Person).WithMany(p => p.ShopPeople)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShopPersons_Persons");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopPeople)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShopPersons_Shops");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}